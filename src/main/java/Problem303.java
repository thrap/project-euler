import java.util.ArrayList;
import java.util.List;

public class Problem303 {
	
	static int limit = 1000;
	static List<Integer>[] list = new List[limit];
	
	public static void main(String[] args) {
		System.out.println(solution());
//		System.out.println("mangler: " + mangler.size());
//		System.out.println(mangler);
		/*
			950837718
			mangler: 541
			[999, 1098, 1099, 1198, 1199, 1298, 1299, 1398, 1399, 1498, 1499, 1598, 1599, 1698, 1699, 1798, 1799, 1898, 1899, 1998, 1999, 2097, 2098, 2099, 2197, 2198, 2199, 2297, 2298, 2299, 2397, 2398, 2399, 2497, 2498, 2499, 2597, 2598, 2599, 2697, 2698, 2699, 2797, 2798, 2799, 2897, 2898, 2899, 2997, 2998, 2999, 3096, 3097, 3098, 3099, 3196, 3197, 3198, 3199, 3296, 3297, 3298, 3299, 3396, 3397, 3398, 3399, 3496, 3497, 3498, 3499, 3596, 3597, 3598, 3599, 3696, 3697, 3698, 3699, 3796, 3797, 3798, 3799, 3896, 3897, 3898, 3899, 3996, 3997, 3998, 3999, 4095, 4096, 4097, 4098, 4099, 4195, 4196, 4197, 4198, 4199, 4295, 4296, 4297, 4298, 4299, 4395, 4396, 4397, 4398, 4399, 4495, 4496, 4497, 4498, 4499, 4595, 4596, 4597, 4598, 4599, 4695, 4696, 4697, 4698, 4699, 4795, 4796, 4797, 4798, 4799, 4895, 4896, 4897, 4898, 4899, 4995, 4996, 4997, 4998, 4999, 5094, 5095, 5096, 5097, 5098, 5099, 5194, 5195, 5196, 5197, 5198, 5199, 5294, 5295, 5296, 5297, 5298, 5299, 5394, 5395, 5396, 5397, 5398, 5399, 5494, 5495, 5496, 5497, 5498, 5499, 5594, 5595, 5596, 5597, 5598, 5599, 5694, 5695, 5696, 5697, 5698, 5699, 5794, 5795, 5796, 5797, 5798, 5799, 5894, 5895, 5896, 5897, 5898, 5899, 5994, 5995, 5996, 5997, 5998, 5999, 6093, 6094, 6095, 6096, 6097, 6098, 6099, 6193, 6194, 6195, 6196, 6197, 6198, 6199, 6293, 6294, 6295, 6296, 6297, 6298, 6299, 6393, 6394, 6395, 6396, 6397, 6398, 6399, 6493, 6494, 6495, 6496, 6497, 6498, 6499, 6593, 6594, 6595, 6596, 6597, 6598, 6599, 6693, 6694, 6695, 6696, 6697, 6698, 6699, 6793, 6794, 6795, 6796, 6797, 6798, 6799, 6893, 6894, 6895, 6896, 6897, 6898, 6899, 6993, 6994, 6995, 6996, 6997, 6998, 6999, 7092, 7093, 7094, 7095, 7096, 7097, 7098, 7099, 7192, 7193, 7194, 7195, 7196, 7197, 7198, 7199, 7292, 7293, 7294, 7295, 7296, 7297, 7298, 7299, 7392, 7393, 7394, 7395, 7396, 7397, 7398, 7399, 7492, 7493, 7494, 7495, 7496, 7497, 7498, 7499, 7592, 7593, 7594, 7595, 7596, 7597, 7598, 7599, 7692, 7693, 7694, 7695, 7696, 7697, 7698, 7699, 7792, 7793, 7794, 7795, 7796, 7797, 7798, 7799, 7892, 7893, 7894, 7895, 7896, 7897, 7898, 7899, 7992, 7993, 7994, 7995, 7996, 7997, 7998, 7999, 8091, 8092, 8093, 8094, 8095, 8096, 8097, 8098, 8099, 8191, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8291, 8292, 8293, 8294, 8295, 8296, 8297, 8298, 8299, 8391, 8392, 8393, 8394, 8395, 8396, 8397, 8398, 8399, 8491, 8492, 8493, 8494, 8495, 8496, 8497, 8498, 8499, 8591, 8592, 8593, 8594, 8595, 8596, 8597, 8598, 8599, 8691, 8692, 8693, 8694, 8695, 8696, 8697, 8698, 8699, 8791, 8792, 8793, 8794, 8795, 8796, 8797, 8798, 8799, 8891, 8892, 8893, 8894, 8895, 8896, 8897, 8898, 8899, 8991, 8992, 8993, 8994, 8995, 8996, 8997, 8998, 8999, 9090, 9091, 9092, 9093, 9094, 9095, 9096, 9097, 9098, 9099, 9190, 9191, 9192, 9193, 9194, 9195, 9196, 9197, 9198, 9199, 9290, 9291, 9292, 9293, 9294, 9295, 9296, 9297, 9298, 9299, 9390, 9391, 9392, 9393, 9394, 9395, 9396, 9397, 9398, 9399, 9490, 9491, 9492, 9493, 9494, 9495, 9496, 9497, 9498, 9499, 9590, 9591, 9592, 9593, 9594, 9595, 9596, 9597, 9598, 9599, 9690, 9691, 9692, 9693, 9694, 9695, 9696, 9697, 9698, 9699, 9790, 9791, 9792, 9793, 9794, 9795, 9796, 9797, 9798, 9799, 9890, 9891, 9892, 9893, 9894, 9895, 9896, 9897, 9898, 9899, 9990, 9991, 9992, 9993, 9994, 9995, 9996, 9997, 9998, 9999]

		 */
	}
	
	public static long solution() {
		for (int i = 0; i < limit; i++) {
			list[i] = new ArrayList<Integer>();
			for (int j = 1; j < limit; j++) {
				if (legal((i*j)%limit))
					list[i].add(j);
			}
		}
		
		long sum = 0;
		List<Integer> mangler = new ArrayList<Integer>();
		for (int i = 1; i <= 10000; i++) {
			if (ekkel(i)) {
				mangler.add(i);
				continue;
			}
			long f = f(i);
			sum+=f;
//			System.out.println(i + ": "+f);
//			if (f != f(i))
//				System.out.println("FEIL FAEN AS");
		}
//		System.out.println(sum);
		return sum;
	}

	public static long f(long n) {
		List<Integer> liste = list[(int)n%limit];
		
		if (n == 999)
			return 111333555778L;
		if (n == 9999)
			return 1111333355557778L;
		
		for (long i = 0; true; i+=limit) {
			for (Integer integer : liste) {
				if (legal(n*(i+integer)))
					return i+integer;
			}
		}
	}
//	
//	public static long f(long n) {
//		for (long i = 1; true; i++) {
//			if (legal(n*i))
//				return i;
//		}
//	}
	
	public static boolean ekkel(int n) {
		int asd = 100;
		String string = ""+n;
		if (string.charAt(string.length()-1) == '9')
			return false;
		if (string.length() != 4)
			return false;
		asd-=string.charAt(0)-'0';
		return n%1000 >= 900+asd-1;
	}
	
	public static boolean legal(long n) {
		String tall = ""+n;
		for (int i = 3; i <= 9; i++) {
			if (tall.contains(""+i))
				return false;
		}
		return true;
	}
}
